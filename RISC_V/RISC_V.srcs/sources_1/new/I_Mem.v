`timescale 1ns / 1ps

module I_Mem(
    input reset,
    input clk,
    input [31:0] Address,
    output reg [31:0] Instruction
    );
    
    reg [31:0] imem [0: 1024];
    
    always @(posedge clk)
    begin
        Instruction <= imem[Address];
    end
    
    always @(posedge reset)
    begin
        //R-type  = 32'b f7    _rs2  _rs1  _f3 _rd   _opcode
        //imem[0] = 32'b0000000_00010_00001_000_00011_0110011; //ADD x3, x1, x2
        //imem[0] = 32'b0100000_00010_00001_000_00011_0110011; //SUB x3, x1, x2
        //imem[0] = 32'b0000000_00010_00001_100_00011_0110011; //XOR x3, x1, x2
        //imem[0] = 32'b0000000_00010_00001_110_00011_0110011; //OR x3, x1, x2
        //imem[0] = 32'b0000000_00010_00001_111_00011_0110011; //AND x3, x1, x2
        //imem[0] = 32'b0000000_00010_00001_001_00011_0110011; //SLL x3, x1, x2
        //imem[0] = 32'b0000000_00010_00001_101_00011_0110011; //SRL x3, x1, x2
        //imem[0] = 32'b0100000_00010_00001_101_00011_0110011; //SRA x3, x1, x2
        //imem[0] = 32'b0000000_00010_00001_010_00011_0110011; //SLT x3, x1, x2
        //imem[0] = 32'b0000000_00010_00001_011_00011_0110011; //SLTU x3, x1, x2
        
        //I-type  = 32'b i[11:0]    _rs1  _f3 _rd   _opcode
        //imem[0] = 32'b000001101001_00001_000_00011_0010011; //ADDI x3, x1, 104
        //imem[0] = 32'b000001101001_00001_100_00011_0010011; //XORI x3, x1, 104
        //imem[0] = 32'b000001101001_00001_110_00011_0010011; //ORI x3, x1, 104
        //imem[0] = 32'b000000000000_00001_111_00001_0010011; //ANDI x3, x1, 104
        //imem[0] = 32'b000000001001_00001_001_00011_0010011; //SLLI x3, x1, 9
        //imem[0] = 32'b000000000100_00001_101_00011_0010011; //SRLI x3, x1, 4
        //imem[0] = 32'b010000000011_00001_101_00011_0010011; //SRAI x3, x1, 3
        //imem[0] = 32'b000000000011_00001_010_00011_0010011; //SLTI x3, x1, 3
        //imem[0] = 32'b000000000011_00001_011_00011_0010011; //SLTIU x3, x1, 3
        
        //I-type  = 32'b i[11:0]    _rs1  _f3 _rd   _opcode
        //imem[0] = 32'b000000000100_00001_000_00011_0000011; //LB x3, 4(x1)
        //imem[0] = 32'b000000000100_00001_001_00011_0000011; //LH x3, 4(x1)
        //imem[0] = 32'b000000000100_00001_010_00011_0000011; //LW x3, 4(x1)
        //imem[0] = 32'b000000000100_00001_100_00011_0000011; //LBU x3, 4(x1)
        //imem[0] = 32'b000000000100_00001_101_00011_0000011; //LHU x3, 4(x1)
        
        //S-type  = 32'b i11:5 _rs2  _rs1  _f3 _i4:0 _opcode
        //imem[0] = 32'b0000000_00010_00001_000_00100_0100011; //SB x2, 4(x1)
        //imem[0] = 32'b0000000_00010_00001_001_00100_0100011; //SH x2, 4(x1)
        //imem[0] = 32'b0000000_00010_00001_010_00100_0100011; //SW x2, 4(x1)
        
        //B-type  = 32'bi12_i11:5_rs2  _rs1  _f3 _i4:0_i11_opcode
        //imem[0] = 32'b0_000011_00010_00001_000_0010_0_1100011; //BEQ x1, x2, 100
        //imem[0] = 32'b0_000011_00010_00001_001_0010_0_1100011; //BNE x1, x2, 100
        //imem[0] = 32'b0_000011_00010_00001_100_0010_0_1100011; //BLT x1, x2, 100
        //imem[0] = 32'b0_000011_00010_00001_101_0010_0_1100011; //BGE x1, x2, 100
        //imem[0] = 32'b0_000011_00010_00001_110_0010_0_1100011; //BLTU x1, x2, 100
        //imem[0] = 32'b0_000011_00010_00001_111_0010_0_1100011; //BGEU x1, x2, 100
        
        //Jal     = 32'bi20_i10:1_i11_i19:12_rd_opcode
        //imem[0] = 32'b0_0000110010_0_00000000_00001_1101111; //JAL x1, 100
        
        //Jalr    = 32'b i[11:0]    _rs1  _f3 _rd   _opcode
        //imem[0] = 32'b000001100100_00001_000_00010_1100111; //JALR x2, 100(x1)
        
        //U_tpye  = 32'b i[31:12]            _rd   _opcode
        //imem[0] = 32'b00000000000001100100_00010_0110111; //LUI x2,100
        //imem[0] = 32'b00000000000001100100_00101_0010111; //AUIPC x5, 100
        
        
        //cong cac so tu 1 den 10
        imem[0]  = 32'b00000000000000000000001010010011; //addi x5,x0,0
        imem[4]  = 32'b00000000000000000000001100010011; //addi x6,x0,0
        imem[8]  = 32'b00000000100100000000001110010011; //addi x7,x0,9
                                                         //loop:
        imem[12] = 32'b00000000010100111100100001100011; //blt x7,x5,end
        imem[16] = 32'b00000000000100101000001010010011; //addi x5,x5,1
        imem[20] = 32'b00000000010100110000001100110011; //add x6,x6,x5
        imem[24] = 32'b11111111010111111111111001101111; //jal x28, loop
                                                         //end:
  
    end
endmodule
